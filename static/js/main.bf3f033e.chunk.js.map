{"version":3,"sources":["axios.js","Row.js","requests.js","Banner.js","Nav.js","App.js","reportWebVitals.js","index.js"],"names":["instance","axios","create","baseURL","Row","title","fetchUrl","isLargeRow","useState","movies","setMovies","useEffect","a","get","request","console","log","data","results","fetchData","table","className","map","movie","src","poster_path","backdrop_path","alt","name","id","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Banner","str","n","setMovie","Math","floor","random","length","style","height","backgroundSize","backgroundImage","backgroundPosition","original_name","overview","substr","Nav","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bf3f033e.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    baseURL : \"https://api.themoviedb.org/3\",\r\n});\r\n\r\nexport default instance;","import React, { useState, useEffect } from 'react';\r\nimport axios from './axios';\r\nimport \"./Row.css\"\r\n//import Youtube from 'react-youtube';\r\n//import movieTrailer from \"movie-trailer\";\r\n\r\nconst base_url=\"https://image.tmdb.org/t/p/original/\";\r\n\r\nfunction Row({ title, fetchUrl, isLargeRow }) {\r\n    const [movies, setMovies] = useState([])\r\n    //const [trailerUrl, setTrailerUrl] = useState([]);\r\n        useEffect(() => {\r\n            async function fetchData() {\r\n                const request = await axios.get( fetchUrl );\r\n                console.log(request);\r\n                setMovies(request.data.results);\r\n                return request;\r\n            }\r\n            fetchData();\r\n        }, [fetchUrl]);\r\n    \r\n   /* const opts = {\r\n        height: \"390\",\r\n        width: \"100%\",\r\n        playerVars: {\r\n            autoplay: 1,\r\n        },\r\n    };\r\n\r\n    const handleClick = (movie) => {\r\n        if (trailerUrl) {\r\n            setTrailerUrl('');\r\n        } else {\r\n            movieTrailer(movie?.name || \"\")\r\n                .then((url) => {\r\n                    const urlParams = new URLSearchParams(new URL(url).search);\r\n                    setTrailerUrl(urlParams.get(\"v\"));\r\n                })\r\n                .catch((error) => console.log(error));\r\n        }\r\n    }*/\r\n   \r\n    console.table(movies);\r\n\r\n    return (\r\n        <div className=\"row\">\r\n            <h2>{title}</h2>\r\n\r\n            <div className=\"row__posters\">\r\n                {/*all_row_posters*/}\r\n                {movies.map(movie => (\r\n                    <img\r\n                        key={movie.id}\r\n                        className={`row_poster ${isLargeRow && \"row_posterLarge\"}`}\r\n                        src={`${base_url}${isLargeRow ? movie.poster_path: movie.backdrop_path  }`}\r\n                        alt={movie.name} />\r\n                ))}\r\n            </div>\r\n           {/*trailerUrl && <Youtube videoId={trailerUrl} opts={opts} />*/}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Row\r\n","const API_KEY=\"8b8e72558fb2d29f84a94f8c542f1f13\";\r\n\r\nconst requests ={\r\n\r\nfetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`, \r\nfetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\r\nfetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\r\nfetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\r\nfetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\r\nfetchHorrorMovies:  `/discover/movie?api_key=${API_KEY}&with_genres=27`,\r\nfetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\r\nfetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\r\n}\r\n\r\nexport default requests;","import React, { useState, useEffect } from 'react';\r\nimport axios from './axios';\r\nimport requests from './requests';\r\nimport \"./Banner.css\";\r\n\r\nfunction Banner() {\r\n    const [movie, setMovie] = useState([]);\r\n\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n            const request = await axios.get(requests.fetchNetflixOriginals);\r\n            setMovie(request.data.results[\r\n                Math.floor(Math.random() * request.data.results.length - 1)\r\n            ]\r\n            );\r\n            return request;\r\n        }\r\n        fetchData();\r\n    }, []);\r\n\r\n    //console.log(\"Heelo world\",movie);\r\n\r\n    function truncate(str, n) {\r\n        return str?.length > n ? str.substr(0, n - 1) + \"...\" : str;\r\n    }\r\n\r\n    return (\r\n        <header className=\"banner\"\r\n            style={{\r\n            height:\"100%\",\r\n            backgroundSize: \"cover\",\r\n            backgroundImage: `url(\"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\")`,\r\n            backgroundPosition: \"center center\",\r\n        }}\r\n        >\r\n            <div className=\"banner_contents\">\r\n                {/*title*/}\r\n                <h1 className=\"banner_title\">{movie?.title || movie?.name || movie?.original_name} </h1>\r\n                {/*div - 2 buttons*/}\r\n                <div className=\"banner_buttons\">\r\n                    <button className=\"banner_button\">Play Now</button>\r\n                    <button className=\"banner_button\">+ My list</button>\r\n                </div>\r\n                {/*description*/}\r\n                <h1 className=\"banner_description\">\r\n                    {truncate(movie?.overview,150)}\r\n                </h1>\r\n\r\n\r\n            </div>\r\n            <div className=\"banner_fadebottom\" />\r\n            \r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Banner\r\n","import React from 'react'\r\nimport \"./Nav.css\";\r\n\r\nfunction Nav() {\r\n    return (\r\n        <div className=\"nav\">\r\n            <img className=\"nav_logo\"\r\n                src=\"https://upload.wikimedia.org/wikipedia/commons/0/08/Netflix_2015_logo.svg\"\r\n                alt=\"netflix-logo\" />\r\n            <img className=\"nav_profile\"\r\n                src=\"https://mir-s3-cdn-cf.behance.net/project_modules/disp/1bdc9a33850498.56ba69ac2ba5b.png\"\r\n                alt=\"netflix-profile\" />\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Nav\r\n","import React from 'react';\nimport './App.css';\nimport Row from './Row';\nimport requests from './requests';\nimport Banner from \"./Banner\";\nimport Nav from './Nav';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Nav />\n      <Banner />\n      <Row\n        title=\"NETLFLIX ORIGINALS\"\n        fetchUrl={requests.fetchNetflixOriginals}\n        isLargeRow={true}\n      />\n      <Row title=\"Trending Now\" fetchUrl={requests.fetchTrending} />\n      <Row title=\"Top Rated\" fetchUrl={requests.fetchTopRated} />\n      <Row title=\"Action Movies\" fetchUrl={requests.fetchActionMovies} />\n      <Row title=\"Comedy Movies\" fetchUrl={requests.fetchComedyMovies} />\n      <Row title=\"Horror Movies\" fetchUrl={requests.fetchHorrorMovies} />\n      <Row title=\"Romance Movies\" fetchUrl={requests.fetchRomanceMovies} />\n      <Row title=\"Documentaries\" fetchUrl={requests.fetchDocumentaries} />\n      \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}